@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}


<div class="text-center">
    <h1 class="display-4">Welcome</h1>
    <p>Learn about <a href="https://learn.microsoft.com/aspnet/core">building Web apps with ASP.NET Core</a>.</p>
</div>
<!-- Add Chart.js and Bootstrap CSS, and a canvas for charts -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" />
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<div class="container my-4">
    <h2>Todo Chart</h2>
    <canvas id="todoChart" width="400" height="200"></canvas>
</div>
<div class="container my-4">
    <h2>Todo Chart Pie</h2>
    <canvas id="todoChartPie" width="400" height="400"></canvas>
</div>

<div id="divOne" style="border: 1px solid black; padding: 10px; margin: 10px;">
    <h2>Test</h2>
    <p>This is a test page.</p>
    <p>Current time: @DateTime.Now</p>
    <p>The Current Todo totals are</p>
    <p>Todo Count: @Model.Todo.Count()</p>
    <p>Todo Completed Count: @Model.Todo.Count(t => t.IsComplete)</p>
</div>
<div style="border: 1px solid black; padding: 10px; margin: 10px;">
    <h2>test Api data</h2>
    <p>This is a test page.</p>

    <p>Todo Count: <span itemid="todoCount">0</span></p>
    <p>Todo Completed Count: <span itemid="todoCountComplete">0</span></p>

</div>
<div style="border: 1px solid black; padding: 10px; margin: 10px;">
    <h2>test Api data summary</h2>
    <p>This is a test page.</p>
    <div itemid="summaryInfo"></div>

</div>
@* // javacript that fetches {"value","value2"} from api/todo
// and updates the span with id todoCount *@
<script type="text/javascript">
    async function fetchData() {
        const response = await fetch('/api/todo');
        let data = await response.json();
        // parse data when it is ["12", "6"]
        if (response.ok) {
            console.log("Response is ok:", response);
            console.log("Data:", data);
            // Assuming the response is in the format ["12","6"]
            const todoCount = data[0]; // First value
            const completedCount = data[1]; // Second value 
            // Update the HTML elements with the fetched data
            document.querySelector('[itemid="todoCount"]').textContent = todoCount;
            document.querySelector('[itemid="todoCountComplete"]').textContent = completedCount;
            //setTimeout(fetchData, 1000 * 3); // Fetch data every second
        } else {
            console.error("Response is not ok:", response);
        }

    }
    fetchData();
    // fecth summary information using /api/summary and present firstname,lastname and total in a table
    async function fetchSummary() {
        const response = await fetch('/api/summary');
        let data = await response.json();

        if (response.ok) {
            console.log("Response is ok:", response);
            console.log("Data:", data);
            // Assuming the response is in the format {firstName: "John", lastName: "Doe", total: 100}
            // or [{firstName: "John", lastName: "Doe", total: 100}, {firstName: "Jane", lastName: "Smith", total: 200}]
            const summaryInfo = data; // First value
            // Update the HTML elements with the fetched data
            //add bootstrap table to the div with itemid="summaryInfo"
            let table = "<table class='table table-striped'><tr><th>First Name</th><th>Last Name</th><th>Total Items</th> <th>Average Days</th><th>Total Days</th></tr>";

            summaryInfo.forEach(item => {
                table += `<tr><td>${item.firstName}</td>
                <td>${item.lastName}</td>
                <td>${item.total}</td>
                <td>${item.avgOutstanding}</td>
                <td>${item.sumOutstanding}</td>
                </tr>`;
                console.log(item.firstName, item.lastName, item.total);
            });
            table += "</table>";
            document.querySelector('[itemid="summaryInfo"]').innerHTML = table;
            setTimeout(fetchSummary, 1000 * 3); // Fetch data every second
            // at this point we can also update the chart with the data

            const ctx = document.getElementById('todoChart').getContext('2d');
            const todoChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: summaryInfo.map(item => `${item.firstName} ${item.lastName}`),
                    datasets: [{
                        label: 'Total Items',
                        data: summaryInfo.map(item => item.total),
                        backgroundColor: 'rgba(75, 192, 192, 0.2)',
                        borderColor: 'rgba(75, 192, 192, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
            const ctxPie = document.getElementById('todoChartPie').getContext('2d');
            const todoChartPie = new Chart(ctxPie, {
                type: 'pie',
                data: {
                    labels: summaryInfo.map(item => `${item.firstName} ${item.lastName}`),
                    datasets: [{
                        label: 'Total Items',
                        data: summaryInfo.map(item => item.total),
                        backgroundColor: [
                            'rgba(255, 99, 132, 0.2)',
                            'rgba(54, 162, 235, 0.2)',
                            'rgba(255, 206, 86, 0.2)',
                            'rgba(75, 192, 192, 0.2)',
                            'rgba(153, 102, 255, 0.2)',
                            'rgba(255, 159, 64, 0.2)'
                        ],
                        borderColor: [
                            'rgba(255, 99, 132, 1)',
                            'rgba(54, 162, 235, 1)',
                            'rgba(255, 206, 86, 1)',
                            'rgba(75, 192, 192, 1)',
                            'rgba(153, 102, 255, 1)',
                            'rgba(255, 159, 64, 1)'
                        ],
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            position: 'top',
                        },
                        title: {
                            display: true,
                            text: 'Todo Chart Pie'
                        }
                    }
                }
            });

        } else {
            console.error("Response is not ok:", response);
        }


    }
    fetchSummary();
</script>